<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>你好</title>
      <link href="/2018/05/17/%E4%BD%A0%E5%A5%BD/"/>
      <url>/2018/05/17/%E4%BD%A0%E5%A5%BD/</url>
      <content type="html"><![CDATA[<p>#import &lt;UIKit/UIKit.h&gt;</p><p>NS_ASSUME_NONNULL_BEGIN</p><p>// Control mask view of style.<br>// 控制蒙版视图的样式<br>typedef NS_ENUM(NSUInteger, PopupMaskType) {<br>PopupMaskTypeBlackBlur = 0, // 黑色半透明模糊效果<br>PopupMaskTypeWhiteBlur, // 白色半透明模糊效果<br>PopupMaskTypeWhite, // 纯白色<br>PopupMaskTypeClear, // 全透明<br>PopupMaskTypeDefault, // 默认黑色半透明效果<br>};</p><p>// Control popup view display position.<br>// 控制弹出视图的显示位置<br>typedef NS_ENUM(NSUInteger, PopupLayoutType) {<br>PopupLayoutTypeTop = 0, // 在顶部显示<br>PopupLayoutTypeBottom,<br>PopupLayoutTypeLeft,<br>PopupLayoutTypeRight,<br>PopupLayoutTypeCenter // 默认居中显示<br>};</p><a id="more"></a><p>// Controls how the popup will be presented.<br>// 控制弹出视图将以哪种样式呈现<br>typedef NS_ENUM(NSInteger, PopupTransitStyle) {<br>PopupTransitStyleFromTop = 0, // 从上部滑出<br>PopupTransitStyleFromBottom, // 从底部滑出<br>PopupTransitStyleFromLeft,  // 从左部滑出<br>PopupTransitStyleFromRight, // 从右部滑出<br>PopupTransitStyleSlightScale, // 轻微缩放效果<br>PopupTransitStyleShrinkInOut, // 从中心点扩大或收缩<br>PopupTransitStyleDefault // 默认淡入淡出效果<br>};</p><p>@protocol SnailPopupControllerDelegate;</p><p>@interface SnailPopupController : NSObject</p><p>@property (nonatomic, weak) id <snailpopupcontrollerdelegate> _Nullable delegate;</snailpopupcontrollerdelegate></p><p>@property (nonatomic, assign) PopupMaskType maskType; // 设置蒙版样式，default = PopupMaskTypeDefault</p><p>@property (nonatomic, assign) PopupLayoutType layoutType; // 视图显示位置，default = PopupLayoutTypeCenter</p><p>// Must set layoutType = PopupLayoutTypeCenter<br>@property (nonatomic, assign) PopupTransitStyle transitStyle; // 视图呈现方式，default = PopupTransitStyleDefault</p><p>// Must set maskType = PopupMaskTypeTranslucent<br>@property (nonatomic, assign) CGFloat maskAlpha; // 设置蒙版视图的透明度，default = 0.5</p><p>// Must set layoutType = PopupLayoutTypeCenter<br>@property (nonatomic, assign) BOOL dismissOppositeDirection; // 是否反方向消失，default = NO</p><p>@property (nonatomic, assign) BOOL dismissOnMaskTouched; // 点击蒙版视图是否响应dismiss事件，default = YES</p><p>@property (nonatomic, assign) BOOL allowPan; // 是否允许视图拖动，default = NO</p><p>@property (nonatomic, assign) BOOL dropTransitionAnimated; // 视图倾斜掉落动画，当transitStyle为PopupTransitStyleFromTop样式时可以设置为YES使用掉落动画，default = NO</p><p>@property (nonatomic, assign, readonly) BOOL isPresenting; // 视图是否正在显示中</p><p>// Block gets called when mask touched. 蒙版触摸事件block，主要用来自定义dismiss动画时间及弹性效果<br>@property (nonatomic, copy) void (^maskTouched)(SnailPopupController *popupController);</p><p>// Should implement this block before the presenting. 应该在present前实现的block<br>@property (nonatomic, copy) void (^willPresent)(SnailPopupController *popupController); // ContentView will present. 视图将要呈现</p><p>@property (nonatomic, copy) void (^didPresent)(SnailPopupController *popupController); // ContentView Did present. 视图已经呈现</p><p>@property (nonatomic, copy) void (^willDismiss)(SnailPopupController *popupController); // ContentView Will dismiss. 视图将要消失</p><p>@property (nonatomic, copy) void (^didDismiss)(SnailPopupController *popupController); // ContentView Did dismiss. 视图已经消失</p><p>/*</p><ul><li>parameter contentView: 需要弹出的视图 // This is the view that you want to appear in popup.</li><li>parameter duration: 动画时间</li><li>parameter isElasticAnimated: 是否使用弹性动画</li><li>parameter sView: 在sView上显示<br>*/</li><li>(void)presentContentView:(nullable UIView <em>)contentView<br>duration:(NSTimeInterval)duration<br>elasticAnimated:(BOOL)isElasticAnimated<br>inView:(nullable UIView </em>)sView;</li></ul><p>// inView = nil, 在Window显示</p><ul><li>(void)presentContentView:(nullable UIView *)contentView duration:(NSTimeInterval)duration elasticAnimated:(BOOL)isElasticAnimated;</li></ul><p>/*</p><ul><li>duration = 0.25</li><li>isElasticAnimated = NO</li><li>inView = nil, 在Window显示<br>*/</li><li>(void)presentContentView:(nullable UIView *)contentView;</li></ul><p>/*</p><ul><li>parameter duration: 动画时间</li><li>parameter isElasticAnimated: 是否使用弹性动画<br>*/</li><li>(void)dismissWithDuration:(NSTimeInterval)duration elasticAnimated:(BOOL)isElasticAnimated;</li></ul><p>// - parameters等于present时对应设置的values</p><ul><li>(void)dismiss;</li></ul><p>// Convenience method for creating popupController with custom values. 便利构造popupController并设置相应属性值</p><ul><li>(instancetype)popupControllerWithLayoutType:(PopupLayoutType)layoutType<br>maskType:(PopupMaskType)maskType<br>dismissOnMaskTouched:(BOOL)dismissOnMaskTouched<br>allowPan:(BOOL)allowPan;</li></ul><p>// When layoutType = PopupLayoutTypeCenter</p><ul><li>(instancetype)popupControllerLayoutInCenterWithTransitStyle:(PopupTransitStyle)transitStyle<br>maskType:(PopupMaskType)maskType<br>dismissOnMaskTouched:(BOOL)dismissOnMaskTouched<br>dismissOppositeDirection:(BOOL)dismissOppositeDirection<br>allowPan:(BOOL)allowPan;</li></ul><p>@end</p><p>@protocol SnailPopupControllerDelegate <nsobject></nsobject></p><p>@optional<br>// - Block对应的Delegate方法，block优先</p><ul><li>(void)popupControllerWillPresent:(nonnull SnailPopupController *)popupController;</li><li>(void)popupControllerDidPresent:(nonnull SnailPopupController *)popupController;</li><li>(void)popupControllerWillDismiss:(nonnull SnailPopupController *)popupController;</li><li>(void)popupControllerDidDismiss:(nonnull SnailPopupController *)popupController;</li></ul><p>@end</p><p>@interface NSObject (SnailPopupController)</p><p>// 因为SnailPopupController内部子视图是默认添加在keyWindow上的，所以如果popupController是局部变量的话不会被任何引用，生命周期也只在这个方法内。为了使内部视图正常响应，所以应将popupController声明为全局属性，保证其生命周期，也可以直接使用sl_popupController<br>@property (nonatomic, strong) SnailPopupController *sl_popupController;</p><p>@end</p><p>NS_ASSUME_NONNULL_END</p>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 第一个标签 </tag>
            
            <tag> 第二个标签 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>你好</title>
      <link href="/2018/05/16/%E4%BD%A0%E5%A5%BD%E7%9A%84%E5%89%AF%E6%9C%AC%203/"/>
      <url>/2018/05/16/%E4%BD%A0%E5%A5%BD%E7%9A%84%E5%89%AF%E6%9C%AC%203/</url>
      <content type="html"><![CDATA[<p>//<br>//  SnailPopupController.h<br>//  <a href="https://github.com/snail-z/SnailPopupController.git" target="_blank" rel="noopener">https://github.com/snail-z/SnailPopupController.git</a><br>//<br>//  Created by zhanghao on 2016/11/15.<br>//  Copyright © 2017年 zhanghao. All rights reserved.<br>//</p><p>#import &lt;UIKit/UIKit.h&gt;</p><p>NS_ASSUME_NONNULL_BEGIN</p><p>// Control mask view of style.<br>// 控制蒙版视图的样式<br>typedef NS_ENUM(NSUInteger, PopupMaskType) {<br>PopupMaskTypeBlackBlur = 0, // 黑色半透明模糊效果<br>PopupMaskTypeWhiteBlur, // 白色半透明模糊效果<br>PopupMaskTypeWhite, // 纯白色<br>PopupMaskTypeClear, // 全透明<br>PopupMaskTypeDefault, // 默认黑色半透明效果<br>};</p><p>// Control popup view display position.<br>// 控制弹出视图的显示位置<br>typedef NS_ENUM(NSUInteger, PopupLayoutType) {<br>PopupLayoutTypeTop = 0, // 在顶部显示<br>PopupLayoutTypeBottom,<br>PopupLayoutTypeLeft,<br>PopupLayoutTypeRight,<br>PopupLayoutTypeCenter // 默认居中显示<br>};</p><p>// Controls how the popup will be presented.<br>// 控制弹出视图将以哪种样式呈现<br>typedef NS_ENUM(NSInteger, PopupTransitStyle) {<br>PopupTransitStyleFromTop = 0, // 从上部滑出<br>PopupTransitStyleFromBottom, // 从底部滑出<br>PopupTransitStyleFromLeft,  // 从左部滑出<br>PopupTransitStyleFromRight, // 从右部滑出<br>PopupTransitStyleSlightScale, // 轻微缩放效果<br>PopupTransitStyleShrinkInOut, // 从中心点扩大或收缩<br>PopupTransitStyleDefault // 默认淡入淡出效果<br>};</p><p>@protocol SnailPopupControllerDelegate;</p><p>@interface SnailPopupController : NSObject</p><p>@property (nonatomic, weak) id <snailpopupcontrollerdelegate> _Nullable delegate;</snailpopupcontrollerdelegate></p><p>@property (nonatomic, assign) PopupMaskType maskType; // 设置蒙版样式，default = PopupMaskTypeDefault</p><p>@property (nonatomic, assign) PopupLayoutType layoutType; // 视图显示位置，default = PopupLayoutTypeCenter</p><p>// Must set layoutType = PopupLayoutTypeCenter<br>@property (nonatomic, assign) PopupTransitStyle transitStyle; // 视图呈现方式，default = PopupTransitStyleDefault</p><p>// Must set maskType = PopupMaskTypeTranslucent<br>@property (nonatomic, assign) CGFloat maskAlpha; // 设置蒙版视图的透明度，default = 0.5</p><p>// Must set layoutType = PopupLayoutTypeCenter<br>@property (nonatomic, assign) BOOL dismissOppositeDirection; // 是否反方向消失，default = NO</p><p>@property (nonatomic, assign) BOOL dismissOnMaskTouched; // 点击蒙版视图是否响应dismiss事件，default = YES</p><p>@property (nonatomic, assign) BOOL allowPan; // 是否允许视图拖动，default = NO</p><p>@property (nonatomic, assign) BOOL dropTransitionAnimated; // 视图倾斜掉落动画，当transitStyle为PopupTransitStyleFromTop样式时可以设置为YES使用掉落动画，default = NO</p><p>@property (nonatomic, assign, readonly) BOOL isPresenting; // 视图是否正在显示中</p><p>// Block gets called when mask touched. 蒙版触摸事件block，主要用来自定义dismiss动画时间及弹性效果<br>@property (nonatomic, copy) void (^maskTouched)(SnailPopupController *popupController);</p><p>// Should implement this block before the presenting. 应该在present前实现的block<br>@property (nonatomic, copy) void (^willPresent)(SnailPopupController *popupController); // ContentView will present. 视图将要呈现</p><p>@property (nonatomic, copy) void (^didPresent)(SnailPopupController *popupController); // ContentView Did present. 视图已经呈现</p><p>@property (nonatomic, copy) void (^willDismiss)(SnailPopupController *popupController); // ContentView Will dismiss. 视图将要消失</p><p>@property (nonatomic, copy) void (^didDismiss)(SnailPopupController *popupController); // ContentView Did dismiss. 视图已经消失</p><p>/*</p><ul><li>parameter contentView: 需要弹出的视图 // This is the view that you want to appear in popup.</li><li>parameter duration: 动画时间</li><li>parameter isElasticAnimated: 是否使用弹性动画</li><li>parameter sView: 在sView上显示<br>*/</li><li>(void)presentContentView:(nullable UIView <em>)contentView<br>duration:(NSTimeInterval)duration<br>elasticAnimated:(BOOL)isElasticAnimated<br>inView:(nullable UIView </em>)sView;</li></ul><p>// inView = nil, 在Window显示</p><ul><li>(void)presentContentView:(nullable UIView *)contentView duration:(NSTimeInterval)duration elasticAnimated:(BOOL)isElasticAnimated;</li></ul><p>/*</p><ul><li>duration = 0.25</li><li>isElasticAnimated = NO</li><li>inView = nil, 在Window显示<br>*/</li><li>(void)presentContentView:(nullable UIView *)contentView;</li></ul><p>/*</p><ul><li>parameter duration: 动画时间</li><li>parameter isElasticAnimated: 是否使用弹性动画<br>*/</li><li>(void)dismissWithDuration:(NSTimeInterval)duration elasticAnimated:(BOOL)isElasticAnimated;</li></ul><p>// - parameters等于present时对应设置的values</p><ul><li>(void)dismiss;</li></ul><p>// Convenience method for creating popupController with custom values. 便利构造popupController并设置相应属性值</p><ul><li>(instancetype)popupControllerWithLayoutType:(PopupLayoutType)layoutType<br>maskType:(PopupMaskType)maskType<br>dismissOnMaskTouched:(BOOL)dismissOnMaskTouched<br>allowPan:(BOOL)allowPan;</li></ul><p>// When layoutType = PopupLayoutTypeCenter</p><ul><li>(instancetype)popupControllerLayoutInCenterWithTransitStyle:(PopupTransitStyle)transitStyle<br>maskType:(PopupMaskType)maskType<br>dismissOnMaskTouched:(BOOL)dismissOnMaskTouched<br>dismissOppositeDirection:(BOOL)dismissOppositeDirection<br>allowPan:(BOOL)allowPan;</li></ul><p>@end</p><p>@protocol SnailPopupControllerDelegate <nsobject></nsobject></p><p>@optional<br>// - Block对应的Delegate方法，block优先</p><ul><li>(void)popupControllerWillPresent:(nonnull SnailPopupController *)popupController;</li><li>(void)popupControllerDidPresent:(nonnull SnailPopupController *)popupController;</li><li>(void)popupControllerWillDismiss:(nonnull SnailPopupController *)popupController;</li><li>(void)popupControllerDidDismiss:(nonnull SnailPopupController *)popupController;</li></ul><p>@end</p><p>@interface NSObject (SnailPopupController)</p><p>// 因为SnailPopupController内部子视图是默认添加在keyWindow上的，所以如果popupController是局部变量的话不会被任何引用，生命周期也只在这个方法内。为了使内部视图正常响应，所以应将popupController声明为全局属性，保证其生命周期，也可以直接使用sl_popupController<br>@property (nonatomic, strong) SnailPopupController *sl_popupController;</p><p>@end</p><p>NS_ASSUME_NONNULL_END</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>你好</title>
      <link href="/2018/05/16/%E4%BD%A0%E5%A5%BD%E7%9A%84%E5%89%AF%E6%9C%AC%202/"/>
      <url>/2018/05/16/%E4%BD%A0%E5%A5%BD%E7%9A%84%E5%89%AF%E6%9C%AC%202/</url>
      <content type="html"><![CDATA[<p>//<br>//  SnailPopupController.h<br>//  <a href="https://github.com/snail-z/SnailPopupController.git" target="_blank" rel="noopener">https://github.com/snail-z/SnailPopupController.git</a><br>//<br>//  Created by zhanghao on 2016/11/15.<br>//  Copyright © 2017年 zhanghao. All rights reserved.<br>//</p><p>#import &lt;UIKit/UIKit.h&gt;<br><a id="more"></a><br>NS_ASSUME_NONNULL_BEGIN</p><p>// Control mask view of style.<br>// 控制蒙版视图的样式<br>typedef NS_ENUM(NSUInteger, PopupMaskType) {<br>PopupMaskTypeBlackBlur = 0, // 黑色半透明模糊效果<br>PopupMaskTypeWhiteBlur, // 白色半透明模糊效果<br>PopupMaskTypeWhite, // 纯白色<br>PopupMaskTypeClear, // 全透明<br>PopupMaskTypeDefault, // 默认黑色半透明效果<br>};</p><p>// Control popup view display position.<br>// 控制弹出视图的显示位置<br>typedef NS_ENUM(NSUInteger, PopupLayoutType) {<br>PopupLayoutTypeTop = 0, // 在顶部显示<br>PopupLayoutTypeBottom,<br>PopupLayoutTypeLeft,<br>PopupLayoutTypeRight,<br>PopupLayoutTypeCenter // 默认居中显示<br>};</p><p>// Controls how the popup will be presented.<br>// 控制弹出视图将以哪种样式呈现<br>typedef NS_ENUM(NSInteger, PopupTransitStyle) {<br>PopupTransitStyleFromTop = 0, // 从上部滑出<br>PopupTransitStyleFromBottom, // 从底部滑出<br>PopupTransitStyleFromLeft,  // 从左部滑出<br>PopupTransitStyleFromRight, // 从右部滑出<br>PopupTransitStyleSlightScale, // 轻微缩放效果<br>PopupTransitStyleShrinkInOut, // 从中心点扩大或收缩<br>PopupTransitStyleDefault // 默认淡入淡出效果<br>};</p><p>@protocol SnailPopupControllerDelegate;</p><p>@interface SnailPopupController : NSObject</p><p>@property (nonatomic, weak) id <snailpopupcontrollerdelegate> _Nullable delegate;</snailpopupcontrollerdelegate></p><p>@property (nonatomic, assign) PopupMaskType maskType; // 设置蒙版样式，default = PopupMaskTypeDefault</p><p>@property (nonatomic, assign) PopupLayoutType layoutType; // 视图显示位置，default = PopupLayoutTypeCenter</p><p>// Must set layoutType = PopupLayoutTypeCenter<br>@property (nonatomic, assign) PopupTransitStyle transitStyle; // 视图呈现方式，default = PopupTransitStyleDefault</p><p>// Must set maskType = PopupMaskTypeTranslucent<br>@property (nonatomic, assign) CGFloat maskAlpha; // 设置蒙版视图的透明度，default = 0.5</p><p>// Must set layoutType = PopupLayoutTypeCenter<br>@property (nonatomic, assign) BOOL dismissOppositeDirection; // 是否反方向消失，default = NO</p><p>@property (nonatomic, assign) BOOL dismissOnMaskTouched; // 点击蒙版视图是否响应dismiss事件，default = YES</p><p>@property (nonatomic, assign) BOOL allowPan; // 是否允许视图拖动，default = NO</p><p>@property (nonatomic, assign) BOOL dropTransitionAnimated; // 视图倾斜掉落动画，当transitStyle为PopupTransitStyleFromTop样式时可以设置为YES使用掉落动画，default = NO</p><p>@property (nonatomic, assign, readonly) BOOL isPresenting; // 视图是否正在显示中</p><p>// Block gets called when mask touched. 蒙版触摸事件block，主要用来自定义dismiss动画时间及弹性效果<br>@property (nonatomic, copy) void (^maskTouched)(SnailPopupController *popupController);</p><p>// Should implement this block before the presenting. 应该在present前实现的block<br>@property (nonatomic, copy) void (^willPresent)(SnailPopupController *popupController); // ContentView will present. 视图将要呈现</p><p>@property (nonatomic, copy) void (^didPresent)(SnailPopupController *popupController); // ContentView Did present. 视图已经呈现</p><p>@property (nonatomic, copy) void (^willDismiss)(SnailPopupController *popupController); // ContentView Will dismiss. 视图将要消失</p><p>@property (nonatomic, copy) void (^didDismiss)(SnailPopupController *popupController); // ContentView Did dismiss. 视图已经消失</p><p>/*</p><ul><li>parameter contentView: 需要弹出的视图 // This is the view that you want to appear in popup.</li><li>parameter duration: 动画时间</li><li>parameter isElasticAnimated: 是否使用弹性动画</li><li>parameter sView: 在sView上显示<br>*/</li><li>(void)presentContentView:(nullable UIView <em>)contentView<br>duration:(NSTimeInterval)duration<br>elasticAnimated:(BOOL)isElasticAnimated<br>inView:(nullable UIView </em>)sView;</li></ul><p>// inView = nil, 在Window显示</p><ul><li>(void)presentContentView:(nullable UIView *)contentView duration:(NSTimeInterval)duration elasticAnimated:(BOOL)isElasticAnimated;</li></ul><p>/*</p><ul><li>duration = 0.25</li><li>isElasticAnimated = NO</li><li>inView = nil, 在Window显示<br>*/</li><li>(void)presentContentView:(nullable UIView *)contentView;</li></ul><p>/*</p><ul><li>parameter duration: 动画时间</li><li>parameter isElasticAnimated: 是否使用弹性动画<br>*/</li><li>(void)dismissWithDuration:(NSTimeInterval)duration elasticAnimated:(BOOL)isElasticAnimated;</li></ul><p>// - parameters等于present时对应设置的values</p><ul><li>(void)dismiss;</li></ul><p>// Convenience method for creating popupController with custom values. 便利构造popupController并设置相应属性值</p><ul><li>(instancetype)popupControllerWithLayoutType:(PopupLayoutType)layoutType<br>maskType:(PopupMaskType)maskType<br>dismissOnMaskTouched:(BOOL)dismissOnMaskTouched<br>allowPan:(BOOL)allowPan;</li></ul><p>// When layoutType = PopupLayoutTypeCenter</p><ul><li>(instancetype)popupControllerLayoutInCenterWithTransitStyle:(PopupTransitStyle)transitStyle<br>maskType:(PopupMaskType)maskType<br>dismissOnMaskTouched:(BOOL)dismissOnMaskTouched<br>dismissOppositeDirection:(BOOL)dismissOppositeDirection<br>allowPan:(BOOL)allowPan;</li></ul><p>@end</p><p>@protocol SnailPopupControllerDelegate <nsobject></nsobject></p><p>@optional<br>// - Block对应的Delegate方法，block优先</p><ul><li>(void)popupControllerWillPresent:(nonnull SnailPopupController *)popupController;</li><li>(void)popupControllerDidPresent:(nonnull SnailPopupController *)popupController;</li><li>(void)popupControllerWillDismiss:(nonnull SnailPopupController *)popupController;</li><li>(void)popupControllerDidDismiss:(nonnull SnailPopupController *)popupController;</li></ul><p>@end</p><p>@interface NSObject (SnailPopupController)</p><p>// 因为SnailPopupController内部子视图是默认添加在keyWindow上的，所以如果popupController是局部变量的话不会被任何引用，生命周期也只在这个方法内。为了使内部视图正常响应，所以应将popupController声明为全局属性，保证其生命周期，也可以直接使用sl_popupController<br>@property (nonatomic, strong) SnailPopupController *sl_popupController;</p><p>@end</p><p>NS_ASSUME_NONNULL_END</p>]]></content>
      
      <categories>
          
          <category> 一级目录 </category>
          
          <category> 二级目录 </category>
          
          <category> 三级目录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 标题2 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>你好</title>
      <link href="/2018/05/16/%E4%BD%A0%E5%A5%BD%E7%9A%84%E5%89%AF%E6%9C%AC/"/>
      <url>/2018/05/16/%E4%BD%A0%E5%A5%BD%E7%9A%84%E5%89%AF%E6%9C%AC/</url>
      <content type="html"><![CDATA[<p>//<br>//  SnailPopupController.h<br>//  <a href="https://github.com/snail-z/SnailPopupController.git" target="_blank" rel="noopener">https://github.com/snail-z/SnailPopupController.git</a><br>//<br>//  Created by zhanghao on 2016/11/15.<br>//  Copyright © 2017年 zhanghao. All rights reserved.<br>//</p><p>#import &lt;UIKit/UIKit.h&gt;</p><p>NS_ASSUME_NONNULL_BEGIN</p><p>// Control mask view of style.<br>// 控制蒙版视图的样式<br>typedef NS_ENUM(NSUInteger, PopupMaskType) {<br>PopupMaskTypeBlackBlur = 0, // 黑色半透明模糊效果<br>PopupMaskTypeWhiteBlur, // 白色半透明模糊效果<br>PopupMaskTypeWhite, // 纯白色<br>PopupMaskTypeClear, // 全透明<br>PopupMaskTypeDefault, // 默认黑色半透明效果<br>};</p><p>// Control popup view display position.<br>// 控制弹出视图的显示位置<br>typedef NS_ENUM(NSUInteger, PopupLayoutType) {<br>PopupLayoutTypeTop = 0, // 在顶部显示<br>PopupLayoutTypeBottom,<br>PopupLayoutTypeLeft,<br>PopupLayoutTypeRight,<br>PopupLayoutTypeCenter // 默认居中显示<br>};</p><p>// Controls how the popup will be presented.<br>// 控制弹出视图将以哪种样式呈现<br>typedef NS_ENUM(NSInteger, PopupTransitStyle) {<br>PopupTransitStyleFromTop = 0, // 从上部滑出<br>PopupTransitStyleFromBottom, // 从底部滑出<br>PopupTransitStyleFromLeft,  // 从左部滑出<br>PopupTransitStyleFromRight, // 从右部滑出<br>PopupTransitStyleSlightScale, // 轻微缩放效果<br>PopupTransitStyleShrinkInOut, // 从中心点扩大或收缩<br>PopupTransitStyleDefault // 默认淡入淡出效果<br>};</p><p>@protocol SnailPopupControllerDelegate;</p><p>@interface SnailPopupController : NSObject</p><p>@property (nonatomic, weak) id <snailpopupcontrollerdelegate> _Nullable delegate;</snailpopupcontrollerdelegate></p><p>@property (nonatomic, assign) PopupMaskType maskType; // 设置蒙版样式，default = PopupMaskTypeDefault</p><p>@property (nonatomic, assign) PopupLayoutType layoutType; // 视图显示位置，default = PopupLayoutTypeCenter</p><p>// Must set layoutType = PopupLayoutTypeCenter<br>@property (nonatomic, assign) PopupTransitStyle transitStyle; // 视图呈现方式，default = PopupTransitStyleDefault</p><p>// Must set maskType = PopupMaskTypeTranslucent<br>@property (nonatomic, assign) CGFloat maskAlpha; // 设置蒙版视图的透明度，default = 0.5</p><p>// Must set layoutType = PopupLayoutTypeCenter<br>@property (nonatomic, assign) BOOL dismissOppositeDirection; // 是否反方向消失，default = NO</p><p>@property (nonatomic, assign) BOOL dismissOnMaskTouched; // 点击蒙版视图是否响应dismiss事件，default = YES</p><p>@property (nonatomic, assign) BOOL allowPan; // 是否允许视图拖动，default = NO</p><p>@property (nonatomic, assign) BOOL dropTransitionAnimated; // 视图倾斜掉落动画，当transitStyle为PopupTransitStyleFromTop样式时可以设置为YES使用掉落动画，default = NO</p><p>@property (nonatomic, assign, readonly) BOOL isPresenting; // 视图是否正在显示中</p><p>// Block gets called when mask touched. 蒙版触摸事件block，主要用来自定义dismiss动画时间及弹性效果<br>@property (nonatomic, copy) void (^maskTouched)(SnailPopupController *popupController);</p><p>// Should implement this block before the presenting. 应该在present前实现的block<br>@property (nonatomic, copy) void (^willPresent)(SnailPopupController *popupController); // ContentView will present. 视图将要呈现</p><p>@property (nonatomic, copy) void (^didPresent)(SnailPopupController *popupController); // ContentView Did present. 视图已经呈现</p><p>@property (nonatomic, copy) void (^willDismiss)(SnailPopupController *popupController); // ContentView Will dismiss. 视图将要消失</p><p>@property (nonatomic, copy) void (^didDismiss)(SnailPopupController *popupController); // ContentView Did dismiss. 视图已经消失</p><p>/*</p><ul><li>parameter contentView: 需要弹出的视图 // This is the view that you want to appear in popup.</li><li>parameter duration: 动画时间</li><li>parameter isElasticAnimated: 是否使用弹性动画</li><li>parameter sView: 在sView上显示<br>*/</li><li>(void)presentContentView:(nullable UIView <em>)contentView<br>duration:(NSTimeInterval)duration<br>elasticAnimated:(BOOL)isElasticAnimated<br>inView:(nullable UIView </em>)sView;</li></ul><p>// inView = nil, 在Window显示</p><ul><li>(void)presentContentView:(nullable UIView *)contentView duration:(NSTimeInterval)duration elasticAnimated:(BOOL)isElasticAnimated;</li></ul><p>/*</p><ul><li>duration = 0.25</li><li>isElasticAnimated = NO</li><li>inView = nil, 在Window显示<br>*/</li><li>(void)presentContentView:(nullable UIView *)contentView;</li></ul><p>/*</p><ul><li>parameter duration: 动画时间</li><li>parameter isElasticAnimated: 是否使用弹性动画<br>*/</li><li>(void)dismissWithDuration:(NSTimeInterval)duration elasticAnimated:(BOOL)isElasticAnimated;</li></ul><p>// - parameters等于present时对应设置的values</p><ul><li>(void)dismiss;</li></ul><p>// Convenience method for creating popupController with custom values. 便利构造popupController并设置相应属性值</p><ul><li>(instancetype)popupControllerWithLayoutType:(PopupLayoutType)layoutType<br>maskType:(PopupMaskType)maskType<br>dismissOnMaskTouched:(BOOL)dismissOnMaskTouched<br>allowPan:(BOOL)allowPan;</li></ul><p>// When layoutType = PopupLayoutTypeCenter</p><ul><li>(instancetype)popupControllerLayoutInCenterWithTransitStyle:(PopupTransitStyle)transitStyle<br>maskType:(PopupMaskType)maskType<br>dismissOnMaskTouched:(BOOL)dismissOnMaskTouched<br>dismissOppositeDirection:(BOOL)dismissOppositeDirection<br>allowPan:(BOOL)allowPan;</li></ul><p>@end</p><p>@protocol SnailPopupControllerDelegate <nsobject></nsobject></p><p>@optional<br>// - Block对应的Delegate方法，block优先</p><ul><li>(void)popupControllerWillPresent:(nonnull SnailPopupController *)popupController;</li><li>(void)popupControllerDidPresent:(nonnull SnailPopupController *)popupController;</li><li>(void)popupControllerWillDismiss:(nonnull SnailPopupController *)popupController;</li><li>(void)popupControllerDidDismiss:(nonnull SnailPopupController *)popupController;</li></ul><p>@end</p><p>@interface NSObject (SnailPopupController)</p><p>// 因为SnailPopupController内部子视图是默认添加在keyWindow上的，所以如果popupController是局部变量的话不会被任何引用，生命周期也只在这个方法内。为了使内部视图正常响应，所以应将popupController声明为全局属性，保证其生命周期，也可以直接使用sl_popupController<br>@property (nonatomic, strong) SnailPopupController *sl_popupController;</p><p>@end</p><p>NS_ASSUME_NONNULL_END</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>你好</title>
      <link href="/2018/05/16/%E4%BD%A0%E5%A5%BD%E7%9A%84%E5%89%AF%E6%9C%AC%204/"/>
      <url>/2018/05/16/%E4%BD%A0%E5%A5%BD%E7%9A%84%E5%89%AF%E6%9C%AC%204/</url>
      <content type="html"><![CDATA[<p>//<br>//  SnailPopupController.h<br>//  <a href="https://github.com/snail-z/SnailPopupController.git" target="_blank" rel="noopener">https://github.com/snail-z/SnailPopupController.git</a><br>//<br>//  Created by zhanghao on 2016/11/15.<br>//  Copyright © 2017年 zhanghao. All rights reserved.<br>//</p><p>#import &lt;UIKit/UIKit.h&gt;</p><p>NS_ASSUME_NONNULL_BEGIN</p><p>// Control mask view of style.<br>// 控制蒙版视图的样式<br>typedef NS_ENUM(NSUInteger, PopupMaskType) {<br>PopupMaskTypeBlackBlur = 0, // 黑色半透明模糊效果<br>PopupMaskTypeWhiteBlur, // 白色半透明模糊效果<br>PopupMaskTypeWhite, // 纯白色<br>PopupMaskTypeClear, // 全透明<br>PopupMaskTypeDefault, // 默认黑色半透明效果<br>};</p><p>// Control popup view display position.<br>// 控制弹出视图的显示位置<br>typedef NS_ENUM(NSUInteger, PopupLayoutType) {<br>PopupLayoutTypeTop = 0, // 在顶部显示<br>PopupLayoutTypeBottom,<br>PopupLayoutTypeLeft,<br>PopupLayoutTypeRight,<br>PopupLayoutTypeCenter // 默认居中显示<br>};</p><p>// Controls how the popup will be presented.<br>// 控制弹出视图将以哪种样式呈现<br>typedef NS_ENUM(NSInteger, PopupTransitStyle) {<br>PopupTransitStyleFromTop = 0, // 从上部滑出<br>PopupTransitStyleFromBottom, // 从底部滑出<br>PopupTransitStyleFromLeft,  // 从左部滑出<br>PopupTransitStyleFromRight, // 从右部滑出<br>PopupTransitStyleSlightScale, // 轻微缩放效果<br>PopupTransitStyleShrinkInOut, // 从中心点扩大或收缩<br>PopupTransitStyleDefault // 默认淡入淡出效果<br>};</p><p>@protocol SnailPopupControllerDelegate;</p><p>@interface SnailPopupController : NSObject</p><p>@property (nonatomic, weak) id <snailpopupcontrollerdelegate> _Nullable delegate;</snailpopupcontrollerdelegate></p><p>@property (nonatomic, assign) PopupMaskType maskType; // 设置蒙版样式，default = PopupMaskTypeDefault</p><p>@property (nonatomic, assign) PopupLayoutType layoutType; // 视图显示位置，default = PopupLayoutTypeCenter</p><p>// Must set layoutType = PopupLayoutTypeCenter<br>@property (nonatomic, assign) PopupTransitStyle transitStyle; // 视图呈现方式，default = PopupTransitStyleDefault</p><p>// Must set maskType = PopupMaskTypeTranslucent<br>@property (nonatomic, assign) CGFloat maskAlpha; // 设置蒙版视图的透明度，default = 0.5</p><p>// Must set layoutType = PopupLayoutTypeCenter<br>@property (nonatomic, assign) BOOL dismissOppositeDirection; // 是否反方向消失，default = NO</p><p>@property (nonatomic, assign) BOOL dismissOnMaskTouched; // 点击蒙版视图是否响应dismiss事件，default = YES</p><p>@property (nonatomic, assign) BOOL allowPan; // 是否允许视图拖动，default = NO</p><p>@property (nonatomic, assign) BOOL dropTransitionAnimated; // 视图倾斜掉落动画，当transitStyle为PopupTransitStyleFromTop样式时可以设置为YES使用掉落动画，default = NO</p><p>@property (nonatomic, assign, readonly) BOOL isPresenting; // 视图是否正在显示中</p><p>// Block gets called when mask touched. 蒙版触摸事件block，主要用来自定义dismiss动画时间及弹性效果<br>@property (nonatomic, copy) void (^maskTouched)(SnailPopupController *popupController);</p><p>// Should implement this block before the presenting. 应该在present前实现的block<br>@property (nonatomic, copy) void (^willPresent)(SnailPopupController *popupController); // ContentView will present. 视图将要呈现</p><p>@property (nonatomic, copy) void (^didPresent)(SnailPopupController *popupController); // ContentView Did present. 视图已经呈现</p><p>@property (nonatomic, copy) void (^willDismiss)(SnailPopupController *popupController); // ContentView Will dismiss. 视图将要消失</p><p>@property (nonatomic, copy) void (^didDismiss)(SnailPopupController *popupController); // ContentView Did dismiss. 视图已经消失</p><p>/*</p><ul><li>parameter contentView: 需要弹出的视图 // This is the view that you want to appear in popup.</li><li>parameter duration: 动画时间</li><li>parameter isElasticAnimated: 是否使用弹性动画</li><li>parameter sView: 在sView上显示<br>*/</li><li>(void)presentContentView:(nullable UIView <em>)contentView<br>duration:(NSTimeInterval)duration<br>elasticAnimated:(BOOL)isElasticAnimated<br>inView:(nullable UIView </em>)sView;</li></ul><p>// inView = nil, 在Window显示</p><ul><li>(void)presentContentView:(nullable UIView *)contentView duration:(NSTimeInterval)duration elasticAnimated:(BOOL)isElasticAnimated;</li></ul><p>/*</p><ul><li>duration = 0.25</li><li>isElasticAnimated = NO</li><li>inView = nil, 在Window显示<br>*/</li><li>(void)presentContentView:(nullable UIView *)contentView;</li></ul><p>/*</p><ul><li>parameter duration: 动画时间</li><li>parameter isElasticAnimated: 是否使用弹性动画<br>*/</li><li>(void)dismissWithDuration:(NSTimeInterval)duration elasticAnimated:(BOOL)isElasticAnimated;</li></ul><p>// - parameters等于present时对应设置的values</p><ul><li>(void)dismiss;</li></ul><p>// Convenience method for creating popupController with custom values. 便利构造popupController并设置相应属性值</p><ul><li>(instancetype)popupControllerWithLayoutType:(PopupLayoutType)layoutType<br>maskType:(PopupMaskType)maskType<br>dismissOnMaskTouched:(BOOL)dismissOnMaskTouched<br>allowPan:(BOOL)allowPan;</li></ul><p>// When layoutType = PopupLayoutTypeCenter</p><ul><li>(instancetype)popupControllerLayoutInCenterWithTransitStyle:(PopupTransitStyle)transitStyle<br>maskType:(PopupMaskType)maskType<br>dismissOnMaskTouched:(BOOL)dismissOnMaskTouched<br>dismissOppositeDirection:(BOOL)dismissOppositeDirection<br>allowPan:(BOOL)allowPan;</li></ul><p>@end</p><p>@protocol SnailPopupControllerDelegate <nsobject></nsobject></p><p>@optional<br>// - Block对应的Delegate方法，block优先</p><ul><li>(void)popupControllerWillPresent:(nonnull SnailPopupController *)popupController;</li><li>(void)popupControllerDidPresent:(nonnull SnailPopupController *)popupController;</li><li>(void)popupControllerWillDismiss:(nonnull SnailPopupController *)popupController;</li><li>(void)popupControllerDidDismiss:(nonnull SnailPopupController *)popupController;</li></ul><p>@end</p><p>@interface NSObject (SnailPopupController)</p><p>// 因为SnailPopupController内部子视图是默认添加在keyWindow上的，所以如果popupController是局部变量的话不会被任何引用，生命周期也只在这个方法内。为了使内部视图正常响应，所以应将popupController声明为全局属性，保证其生命周期，也可以直接使用sl_popupController<br>@property (nonatomic, strong) SnailPopupController *sl_popupController;</p><p>@end</p><p>NS_ASSUME_NONNULL_END</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>你好</title>
      <link href="/2018/05/16/%E4%BD%A0%E5%A5%BD%E7%9A%84%E5%89%AF%E6%9C%AC%205/"/>
      <url>/2018/05/16/%E4%BD%A0%E5%A5%BD%E7%9A%84%E5%89%AF%E6%9C%AC%205/</url>
      <content type="html"><![CDATA[<p>//<br>//  SnailPopupController.h<br>//  <a href="https://github.com/snail-z/SnailPopupController.git" target="_blank" rel="noopener">https://github.com/snail-z/SnailPopupController.git</a><br>//<br>//  Created by zhanghao on 2016/11/15.<br>//  Copyright © 2017年 zhanghao. All rights reserved.<br>//</p><p>#import &lt;UIKit/UIKit.h&gt;</p><p>NS_ASSUME_NONNULL_BEGIN</p><p>// Control mask view of style.<br>// 控制蒙版视图的样式<br>typedef NS_ENUM(NSUInteger, PopupMaskType) {<br>PopupMaskTypeBlackBlur = 0, // 黑色半透明模糊效果<br>PopupMaskTypeWhiteBlur, // 白色半透明模糊效果<br>PopupMaskTypeWhite, // 纯白色<br>PopupMaskTypeClear, // 全透明<br>PopupMaskTypeDefault, // 默认黑色半透明效果<br>};</p><p>// Control popup view display position.<br>// 控制弹出视图的显示位置<br>typedef NS_ENUM(NSUInteger, PopupLayoutType) {<br>PopupLayoutTypeTop = 0, // 在顶部显示<br>PopupLayoutTypeBottom,<br>PopupLayoutTypeLeft,<br>PopupLayoutTypeRight,<br>PopupLayoutTypeCenter // 默认居中显示<br>};</p><p>// Controls how the popup will be presented.<br>// 控制弹出视图将以哪种样式呈现<br>typedef NS_ENUM(NSInteger, PopupTransitStyle) {<br>PopupTransitStyleFromTop = 0, // 从上部滑出<br>PopupTransitStyleFromBottom, // 从底部滑出<br>PopupTransitStyleFromLeft,  // 从左部滑出<br>PopupTransitStyleFromRight, // 从右部滑出<br>PopupTransitStyleSlightScale, // 轻微缩放效果<br>PopupTransitStyleShrinkInOut, // 从中心点扩大或收缩<br>PopupTransitStyleDefault // 默认淡入淡出效果<br>};</p><p>@protocol SnailPopupControllerDelegate;</p><p>@interface SnailPopupController : NSObject</p><p>@property (nonatomic, weak) id <snailpopupcontrollerdelegate> _Nullable delegate;</snailpopupcontrollerdelegate></p><p>@property (nonatomic, assign) PopupMaskType maskType; // 设置蒙版样式，default = PopupMaskTypeDefault</p><p>@property (nonatomic, assign) PopupLayoutType layoutType; // 视图显示位置，default = PopupLayoutTypeCenter</p><p>// Must set layoutType = PopupLayoutTypeCenter<br>@property (nonatomic, assign) PopupTransitStyle transitStyle; // 视图呈现方式，default = PopupTransitStyleDefault</p><p>// Must set maskType = PopupMaskTypeTranslucent<br>@property (nonatomic, assign) CGFloat maskAlpha; // 设置蒙版视图的透明度，default = 0.5</p><p>// Must set layoutType = PopupLayoutTypeCenter<br>@property (nonatomic, assign) BOOL dismissOppositeDirection; // 是否反方向消失，default = NO</p><p>@property (nonatomic, assign) BOOL dismissOnMaskTouched; // 点击蒙版视图是否响应dismiss事件，default = YES</p><p>@property (nonatomic, assign) BOOL allowPan; // 是否允许视图拖动，default = NO</p><p>@property (nonatomic, assign) BOOL dropTransitionAnimated; // 视图倾斜掉落动画，当transitStyle为PopupTransitStyleFromTop样式时可以设置为YES使用掉落动画，default = NO</p><p>@property (nonatomic, assign, readonly) BOOL isPresenting; // 视图是否正在显示中</p><p>// Block gets called when mask touched. 蒙版触摸事件block，主要用来自定义dismiss动画时间及弹性效果<br>@property (nonatomic, copy) void (^maskTouched)(SnailPopupController *popupController);</p><p>// Should implement this block before the presenting. 应该在present前实现的block<br>@property (nonatomic, copy) void (^willPresent)(SnailPopupController *popupController); // ContentView will present. 视图将要呈现</p><p>@property (nonatomic, copy) void (^didPresent)(SnailPopupController *popupController); // ContentView Did present. 视图已经呈现</p><p>@property (nonatomic, copy) void (^willDismiss)(SnailPopupController *popupController); // ContentView Will dismiss. 视图将要消失</p><p>@property (nonatomic, copy) void (^didDismiss)(SnailPopupController *popupController); // ContentView Did dismiss. 视图已经消失</p><p>/*</p><ul><li>parameter contentView: 需要弹出的视图 // This is the view that you want to appear in popup.</li><li>parameter duration: 动画时间</li><li>parameter isElasticAnimated: 是否使用弹性动画</li><li>parameter sView: 在sView上显示<br>*/</li><li>(void)presentContentView:(nullable UIView <em>)contentView<br>duration:(NSTimeInterval)duration<br>elasticAnimated:(BOOL)isElasticAnimated<br>inView:(nullable UIView </em>)sView;</li></ul><p>// inView = nil, 在Window显示</p><ul><li>(void)presentContentView:(nullable UIView *)contentView duration:(NSTimeInterval)duration elasticAnimated:(BOOL)isElasticAnimated;</li></ul><p>/*</p><ul><li>duration = 0.25</li><li>isElasticAnimated = NO</li><li>inView = nil, 在Window显示<br>*/</li><li>(void)presentContentView:(nullable UIView *)contentView;</li></ul><p>/*</p><ul><li>parameter duration: 动画时间</li><li>parameter isElasticAnimated: 是否使用弹性动画<br>*/</li><li>(void)dismissWithDuration:(NSTimeInterval)duration elasticAnimated:(BOOL)isElasticAnimated;</li></ul><p>// - parameters等于present时对应设置的values</p><ul><li>(void)dismiss;</li></ul><p>// Convenience method for creating popupController with custom values. 便利构造popupController并设置相应属性值</p><ul><li>(instancetype)popupControllerWithLayoutType:(PopupLayoutType)layoutType<br>maskType:(PopupMaskType)maskType<br>dismissOnMaskTouched:(BOOL)dismissOnMaskTouched<br>allowPan:(BOOL)allowPan;</li></ul><p>// When layoutType = PopupLayoutTypeCenter</p><ul><li>(instancetype)popupControllerLayoutInCenterWithTransitStyle:(PopupTransitStyle)transitStyle<br>maskType:(PopupMaskType)maskType<br>dismissOnMaskTouched:(BOOL)dismissOnMaskTouched<br>dismissOppositeDirection:(BOOL)dismissOppositeDirection<br>allowPan:(BOOL)allowPan;</li></ul><p>@end</p><p>@protocol SnailPopupControllerDelegate <nsobject></nsobject></p><p>@optional<br>// - Block对应的Delegate方法，block优先</p><ul><li>(void)popupControllerWillPresent:(nonnull SnailPopupController *)popupController;</li><li>(void)popupControllerDidPresent:(nonnull SnailPopupController *)popupController;</li><li>(void)popupControllerWillDismiss:(nonnull SnailPopupController *)popupController;</li><li>(void)popupControllerDidDismiss:(nonnull SnailPopupController *)popupController;</li></ul><p>@end</p><p>@interface NSObject (SnailPopupController)</p><p>// 因为SnailPopupController内部子视图是默认添加在keyWindow上的，所以如果popupController是局部变量的话不会被任何引用，生命周期也只在这个方法内。为了使内部视图正常响应，所以应将popupController声明为全局属性，保证其生命周期，也可以直接使用sl_popupController<br>@property (nonatomic, strong) SnailPopupController *sl_popupController;</p><p>@end</p><p>NS_ASSUME_NONNULL_END</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/05/16/Hello-World-0%E7%9A%84%E5%89%AF%E6%9C%AC%204/"/>
      <url>/2018/05/16/Hello-World-0%E7%9A%84%E5%89%AF%E6%9C%AC%204/</url>
      <content type="html"><![CDATA[]]></content>
      
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/05/16/Hello-World-0%E7%9A%84%E5%89%AF%E6%9C%AC%203/"/>
      <url>/2018/05/16/Hello-World-0%E7%9A%84%E5%89%AF%E6%9C%AC%203/</url>
      <content type="html"><![CDATA[]]></content>
      
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/05/16/Hello-World-0%E7%9A%84%E5%89%AF%E6%9C%AC/"/>
      <url>/2018/05/16/Hello-World-0%E7%9A%84%E5%89%AF%E6%9C%AC/</url>
      <content type="html"><![CDATA[]]></content>
      
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/05/16/Hello-World-0/"/>
      <url>/2018/05/16/Hello-World-0/</url>
      <content type="html"><![CDATA[]]></content>
      
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/05/16/Hello-World-0%E7%9A%84%E5%89%AF%E6%9C%AC%205/"/>
      <url>/2018/05/16/Hello-World-0%E7%9A%84%E5%89%AF%E6%9C%AC%205/</url>
      <content type="html"><![CDATA[]]></content>
      
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/05/16/Hello-World-0%E7%9A%84%E5%89%AF%E6%9C%AC%202/"/>
      <url>/2018/05/16/Hello-World-0%E7%9A%84%E5%89%AF%E6%9C%AC%202/</url>
      <content type="html"><![CDATA[]]></content>
      
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/05/16/hello-world%E7%9A%84%E5%89%AF%E6%9C%AC%204/"/>
      <url>/2018/05/16/hello-world%E7%9A%84%E5%89%AF%E6%9C%AC%204/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/05/16/hello-world%E7%9A%84%E5%89%AF%E6%9C%AC%205/"/>
      <url>/2018/05/16/hello-world%E7%9A%84%E5%89%AF%E6%9C%AC%205/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/05/16/hello-world/"/>
      <url>/2018/05/16/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/05/16/hello-world%E7%9A%84%E5%89%AF%E6%9C%AC%202/"/>
      <url>/2018/05/16/hello-world%E7%9A%84%E5%89%AF%E6%9C%AC%202/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/05/16/hello-world%E7%9A%84%E5%89%AF%E6%9C%AC%203/"/>
      <url>/2018/05/16/hello-world%E7%9A%84%E5%89%AF%E6%9C%AC%203/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/05/16/hello-world%E7%9A%84%E5%89%AF%E6%9C%AC/"/>
      <url>/2018/05/16/hello-world%E7%9A%84%E5%89%AF%E6%9C%AC/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
    </entry>
    
  
  
    
  
</search>
